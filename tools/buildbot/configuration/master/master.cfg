# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}


##### Locks
from buildbot import locks

build_lock = locks.SlaveLock("solarpowerlog_lock",maxCount=1)

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("solarpowerlog", "PASSWORD!",max_builds=2)]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []

c['change_source'].append(GitPoller(
        'git://solarpowerlog.git.sourceforge.net/gitroot/solarpowerlog/solarpowerlog',
        workdir='gitpoller-slp-workdir',
	branch='trunk',
	project='solarpowerlog',
        pollinterval=7200))

c['change_source'].append(GitPoller(
        'git://solarpowerlog.git.sourceforge.net/gitroot/solarpowerlog/solarpowerlog',
        workdir='gitpoller-slp-workdir-deb',
	branch='debian',
	project='solarpowerlog-deb',
        pollinterval=7200))


####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build


# filter to find configure / autotools files --- triggers a complete build.
def has_autoconf_files(change):
    for name in change.files:
        if name.endswith(".am"):
            return True
        elif name.endswith(".in"):
            return True
        elif name.endswith("bootstrap.sh"):
            return True
    return False


from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="all",
                            change_filter=filter.ChangeFilter(
				branch='trunk',
				project='solarpowerlog'),
                            treeStableTimer=600,
                            builderNames=["build"]))

c['schedulers'].append(SingleBranchScheduler(
                            name="autotools",
                            change_filter=filter.ChangeFilter(
				branch='trunk',
				project='solarpowerlog'),
			    fileIsImportant=has_autoconf_files,
                            treeStableTimer=120,
			    onlyImportant=True,
                            builderNames=["build-autotools"]))

c['schedulers'].append(SingleBranchScheduler(
                            name="slp-deb",
                            change_filter=filter.ChangeFilter(
				branch='debian',
				project='solarpowerlog-deb'),
                            treeStableTimer=120,
			    onlyImportant=True,
                            builderNames=["build-deb"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Configure
from buildbot.steps.shell import Compile

factory = BuildFactory()
# check out the source
factory.addStep(Git(
	repourl='git://solarpowerlog.git.sourceforge.net/gitroot/solarpowerlog/solarpowerlog',
	branch='trunk',
	mode='update'))
factory.addStep(Compile(
	timeout=3600
	))


from buildbot.config import BuilderConfig

factory2 = BuildFactory()
# check out the source
factory2.addStep(Git(
	repourl='git://solarpowerlog.git.sourceforge.net/gitroot/solarpowerlog/solarpowerlog',
	branch='trunk',
	mode='copy'))
factory2.addStep(ShellCommand(
	command=["./bootstrap.sh", ""],
	timeout=3600,
	description="Bootstrapping autoconf",
	descriptionDone ="Bootstrapping done"))
factory2.addStep(Configure(
        timeout=3600
	))
factory2.addStep(Compile(
	timeout=3600
	))

factory_deb = BuildFactory()
# check out the source -- debian trunk
factory_deb.addStep(Git(
	repourl='git://solarpowerlog.git.sourceforge.net/gitroot/solarpowerlog/solarpowerlog',
	branch='debian',
	mode='copy'))
# bootstrap and make dist
factory_deb.addStep(ShellCommand(
	command=["./bootstrap.sh", ""],
	timeout=3600,
	description="Bootstrapping autoconf",
	descriptionDone ="Bootstrapping done"))
factory_deb.addStep(Configure(
	timeout=3600
	))
factory_deb.addStep(ShellCommand(
	command=["make", "dist"],
	timeout=3600,
	description="make dist: Making tar",
	descriptionDone ="make dist: done"))
factory_deb.addStep(ShellCommand(
	command=["make", "distcheck"],
	timeout=3600,
	description="Make distcheck: Checking release tar",
	descriptionDone ="Make distcheck done"))

# preparing debian stagedir
factory_deb.addStep(ShellCommand(
	command=["bash","-x", "tools/buildbot/buildbot_make_orig_source",""],
	description="Preparing stagedir"))
# dpkg-buildpackage
factory_deb.addStep(ShellCommand(
	command=["bash" ,"-x", "tools/buildbot/buildbot_dpkgbuildpackage"],
	timeout=3600,
	description="dpkg-buildpackage",
	descriptionDone ="dpkg-buildpackage done"))
# linitian
factory_deb.addStep(ShellCommand(
	command=["bash" ,"-x", "tools/buildbot/buildbot_linitian"],
	description="lintian check"))
# now build the package in pdebuilder
factory_deb.addStep(ShellCommand(
	command=["bash","-x","tools/buildbot/buildbot_pdebuilder"],
	timeout=3600,
	description="pdebuilder build"))


c['builders'] = []
c['builders'].append(
    BuilderConfig(name="build",
      slavenames=["solarpowerlog"],
      locks= [build_lock.access('exclusive')],
      slavebuilddir='build/solarpowerlog',
      factory=factory))


c['builders'].append(
    BuilderConfig(name="build-autotools",
      slavenames=["solarpowerlog"],
      locks= [build_lock.access('exclusive')],
      slavebuilddir='build/solarpowerlog',
      factory=factory2))

c['builders'].append(
    BuilderConfig(name="build-deb",
      slavenames=["solarpowerlog"],
      locks= [build_lock.access('exclusive')],
      slavebuilddir='build/solarpowerlog-deb',
      factory=factory_deb))



####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "solarpowerlog"
c['titleURL'] = "http://sourceforge.net/projects/solarpowerlog/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

