# This is a sample configuation file for solarpowerlog.
#
# The file is parsed by libconfig, so for the grammar see
# http://www.hyperrealm.com/libconfig/

# The application section is for global configuration.

application:
{

    # what debuglevel should be used if not specified by any component
    # Choose out of ALL, TRACE, DEBUG, INFO, WARN, ERROR ,FATAL and NONE
    # optional. If not given, it defaults to "ERROR"
    # Note, if specified a logconfig file, the config file can override this
    # setting.
    dbglevel = "ALL";

    # configuration file to load for liblog4cxx
    # see the liblog4cxx docs for details.
    # (http://http://logging.apache.org/log4cxx/index.html)
    # With the configuration file you can specify different log files for
    # different components of the program.
    # note, that if not given everything will be logged to the console.

    # note: if the filename ends with .xml, libconfig tries to load the
    # configuration in xml-format, which allows even more tweaks.
    #logconfig = "solarpowerlog_lib4cxx.conf";
    #logconfig = "solarpowerlog_lib4cxx.xml";
};

# This section declares the inverters.
inverter :
{
    inverters =
    (
        {
            # (REQUIRED) Name of the Inverter (Will be used as reference in the
            # programm)
            name   = "Inverter_1";

            # (REQUIRED) "Human Readable Description of the fine piece of hardware.
            # Not interpreted by this software"
            description = "A inverter inverting";

            # (REQUIRED) Selects the family of the inverters.
            # (In SW-Speak: Specifies the family of factory to generate.
            # The generated factory will instanciate the correct model class
            # specified by "model"
            manufactor =  "DANFOSS";

            # (REQUIRED) Which model we about to talk too
            # Your choice is at the moment "UniLynx" or "TripleLynx".
            # (To obtain the list of choice, comment this line and run
            # solarpowerlog -- it will tell you the valid options.)
            model ="UniLynx";

            # Communication address of the inverter (as set in the communication
            # menu of the inverter)
            inverter_network = 1;
            inverter_subnet  = 2
            inverter_address = 3;
            # Adress to use as "our" adress for communication
            # if not given it will defaults to 0xfb..
            # you should not need to change this value.
            # (Default is network 0, subnet 0 and address 2)
            # master_network = 0;
            # master_subnet  = 0;
            # master_address = 2;

            # How often should the inverter be queried?
            # The value specifies how long the class will *wait*
            # after one query has been answered.
            # The value can be a float.
            # This value is optional and defaults to 5 seconds
            queryinterval= 5;

            # mode of comm (planned:
            #   "TCP/IP",          Ethernet
            #   "RS485,            RS485
            #   "RS485overTCPIP"   Daisy-Chained modules with one over ethernet,
            #                      the others chained to the rs485 output.
            comms = "TCP/IP";

            # TCP/IP options. Address and Port.
            # All the options regarding the tcp communicatin starting with "tcp".
            # See the documentation of the comm methods for a list.
            # Port can also be a so-called "well-known-port" named as string.
            # (Example: tcpport="http")
            tcpadr =  "127.0.0.1";
            tcpport = "12345";

            # (optional,depreciated)
            # Use this timeout value for all TCP/IP transcations.
            # Usually this parameter is set by the inverters at runtime,
            # so this parameter might not be considered.
            # It is depreciated and will be removed in a later
            # release of solarpowerlog.
            # default: 3 seconds (value: 3000)
            tcptimeout = 3000;
        }
    );
};

logger:
{
    loggers =
    (
    );
};
