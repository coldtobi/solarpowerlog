# This sample configuration shows how to connect with the simulator,
# coigured in the examples_confs/solarpowerlog_simulator files working with the embedded simulator
#
# Please note, the file is parsed by libconfig.


application:
{

    # what debuglevel should be used if not specified by any component
    # Choose out of ALL, TRACE, DEBUG, INFO, WARN, ERROR ,FATAL and NONE
    # optional. If not given, it defaults to "ERROR"
    # Note, if specified a logconfig file, the config file can override this
    # setting.
    dbglevel = "ALL"

    # configuration file to load for liblog4cxx
    # see the liblog4cxx docs for details.
    # (http://http://logging.apache.org/log4cxx/index.html)
    # With the configuration file you can specify different log files for different
    # components of the program.
    # note, that if not given it will log everything to the console.
    # note: if the filename ends with .xml, libconfig tries to load the
    # configuration in xml-format, which allows even more tweaks.
    #logconfig = "solarpowerlog_lib4cxx.conf";
    #logconfig = "solarpowerlog_lib4cxx.xml";
};

inverter :
{
    inverters = (
        { # (REQUIRED) Name of the Inverter (Will be used as reference in the program)
        name   = "Netcat";

        # (REQUIRED) "Human Readable Description of the fine piece of hardware. Not interpreted by this software"
        description = "A Inverter inverting";

        # (REQUIRED) Selects the family of the inverters.
        # (In SW-Speak: Specifies the family of factory to generate. The generated factory will instanciate the correct model class
        # specified by "model"
        manufactor =  "SPUTNIK_ENGINEERING";

        # (REQUIRED) Which model we about to talk too
        # Your choice is "S-Series" (currently)
        model ="S-Series";

        # (REQUIRED BY SPUTNIK, S-Series)
        # mode of comm (planned:
        #		"TCP/IP",          Ethernet
        #		"RS485,            RS485
        #		"RS485overTCPIP"   Daisy-Chained modules with one over ethernet, the others chained to the rs485 output.
        comms = "TCP/IP";

        # TCP/IP options. Address and Port.
        # Port can also be a so-called "well-known-port" named as string. Example: "http"
        tcpadr =  "127.0.0.1";

        tcpport = "12345";
        # optional: Wait maximum this time to connect to the inverter.
        # default: 3 seconds (value: 3000)
        # Note: Currently blocks the logger until timeout or connection!
        tcptimeout = 5000;

        # Communication address of the inverter (as set in the menu of the inverter)
        commadr = 1;
        # Adress to use as "our" adress for communication
        # defaults to 0xFB
        ownadr = 0xfb;

        # How often should the inverter be queried
        # The value specifies how long the class will *wait*
        # after one query has been answered.
        # The value can be a float.
        # This value is optional and defaults to 5 seconds
        queryinterval= 3;
        }
    );
};


logger:
{
    loggers = (
        {
            # This dumper is known as (required)
            name = "DBWriter_tst";
            # It is of type
            type = "DBWriter";
            # And gets its data from
            datasource = "Netcat";

            # Note: solarpowerlog uses CppDB as its database backend.
            # So to get additional hints about configuration options,
            # see http://cppcms.com/sql/cppdb/backendref.html
	    # and http://cppcms.com/sql/cppdb/connstr.html.
	    # By setting the database type to "custom" you can completly
	    # define a connection string with the option db_cppdb_options.
            
	    # database type
 	    # choices are mysql, sqlite3, postgresql, odbc and custom
	    # must be specified
	    db_type = "sqlite3"

	    ### sqlite3:
	    
	    # which file is the database
	    #db_type="sqlite3"
	    #db_database="/tmp/solarpowerlog.sqlite3";
	 
	    # which mode the db should be opened. 
	    # "create" (default) create if db does not exist
	    # "readwrite" open db readwrite, but fail if it does not exists before
	    # (the other availbable mode, "readonly" is not useful for solarpowerlog)
	    #db_mode = "create"
	    
	    # Other options permitted by the CppDB library
	    # Just an example how to use it:
	    #db_cppdb_options="busy_timeout=100@use_prepared=off"

	    ### MySQL
	    #db_type="mysql";
	    
	    # hostname of the server (default is localhost)
	    #db_host="localhost"
	    
	    # user to connect
	    #db_user="dbuser";
	    
	    # password to connect to the server 
	    #db_password="very\'secret";
	    
	    # database to be used
	    #db_database="solarpowerlog";
	    
	    # Port to access the server
	    # db_port="3306";
	    
	    # Alternatively, specify the unix socket to be used
	    # note: specify either port or socket -- not both!
            #db_unixsocket="tmp/mysql.sock"
            
            # Additional parameters (see CppDB homepage, especially the MySQL backend reference)
            #db_cppdb_options="opt_read_timeout=10;opt_compress=1";
            
            ### PostgreSQL
	    #db_type="postgresql";
	    
	    # hostname of the server (default is localhost)
	    #db_host="localhost"
	    
	    # user to connect
	    #db_user="dbuser";
	    
	    # password to connect to the server 
	    #db_password="very\'secret";
	    
	    # database to be used
	    #db_database="solarpowerlog";
	    
	    # Port to access the server
	    # db_port="5432";
	    
            # Additional parameters (see CppDB homepage, especially the postgresql backend reference)
            #db_cppdb_options="@blob=lo";
            
            
            ### ODBC Bridge
            #db_type="odbc";
            # You need to completly specify the connection string with db_cppdb_options:
            # See CppDB documentation of the ODBC backend.
            #db_cppdb_options="DSN=MySource;UID=myuser;PWD=secret";
            
            ### Custom
            #db_type="custom";
            # You need to completly specify the connection string with db_cppdb_options:
            # solarpowerlog will just pass the string to the library.
            #db_cppdb_options="odbc:DSN=MySource;UID=myuser;PWD=secret";
            
            
            
            
            }

    );
};

