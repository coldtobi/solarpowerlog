# This sample configuration shows how to connect with the simulator,
# coigured in the examples_confs/solarpowerlog_simulator files working with the embedded simulator
#
# Please note, the file is parsed by libconfig.


application:
{

    # what debuglevel should be used if not specified by any component
    # Choose out of ALL, TRACE, DEBUG, INFO, WARN, ERROR ,FATAL and NONE
    # optional. If not given, it defaults to "ERROR"
    # Note, if specified a logconfig file, the config file can override this
    # setting.
    dbglevel = "ALL"

    # configuration file to load for liblog4cxx
    # see the liblog4cxx docs for details.
    # (http://http://logging.apache.org/log4cxx/index.html)
    # With the configuration file you can specify different log files for different
    # components of the program.
    # note, that if not given it will log everything to the console.
    # note: if the filename ends with .xml, libconfig tries to load the
    # configuration in xml-format, which allows even more tweaks.
    #logconfig = "solarpowerlog_lib4cxx.conf";
    #logconfig = "solarpowerlog_lib4cxx.xml";
};

inverter :
{
    inverters = (
        { # (REQUIRED) Name of the Inverter (Will be used as reference in the program)
        name   = "Netcat";

        dbglevel =  "ERROR";

        # (REQUIRED) "Human Readable Description of the fine piece of hardware. Not interpreted by this software"
        description = "A Inverter inverting";

        # (REQUIRED) Selects the family of the inverters.
        # (In SW-Speak: Specifies the family of factory to generate. The generated factory will instanciate the correct model class
        # specified by "model"
        manufactor =  "SPUTNIK_ENGINEERING";

        # (REQUIRED) Which model we about to talk too
        # Your choice is "S-Series" (currently)
        model ="S-Series";

        # (REQUIRED BY SPUTNIK, S-Series)
        # mode of comm (planned:
        #                "TCP/IP",          Ethernet
        #                "RS485,            RS485
        #                "RS485overTCPIP"   Daisy-Chained modules with one over ethernet, the others chained to the rs485 output.
        comms = "TCP/IP";

        # TCP/IP options. Address and Port.
        # Port can also be a so-called "well-known-port" named as string. Example: "http"
        tcpadr =  "127.0.0.1";

        tcpport = "12345";
        # optional: Wait maximum this time to connect to the inverter.
        # default: 3 seconds (value: 3000)
        # Note: Currently blocks the logger until timeout or connection!
        tcptimeout = 5000;

        # Communication address of the inverter (as set in the menu of the inverter)
        commadr = 1;
        # Adress to use as "our" adress for communication
        # defaults to 0xFB
        ownadr = 0xfb;

        # How often should the inverter be queried
        # The value specifies how long the class will *wait*
        # after one query has been answered.
        # The value can be a float.
        # This value is optional and defaults to 5 seconds
        queryinterval= 3;
        }
    );
};


logger:
{
    loggers = (
        {
            # This DB Writer is known as (required)
            name = "DBWriter_tst";
            # It is of type
            type = "DBWriter";
            # And gets its data from
            datasource = "Netcat";

            # Note: solarpowerlog uses CppDB as its database backend.
            # So to get additional hints about configuration options,
            # see http://cppcms.com/sql/cppdb/backendref.html
            # and http://cppcms.com/sql/cppdb/connstr.html.
            # By setting the database type to "custom" you can completly
            # define a connection string with the option db_cppdb_options.

            # database type
            # choices are mysql, sqlite3, postgresql, odbc and custom
            # must be specified.

            # Let some examples follow.

            ### sqlite3:

            # which file is the database
            db_type="sqlite3"
            db_database="/tmp/solarpowerlog.sqlite3";

            # which mode the db should be opened.
            # "create" (default) create if db does not exist
            # "readwrite" open db readwrite, but fail if it does not exists before
            # (the other availbable mode, "readonly" is not useful for solarpowerlog)
            db_mode = "create"

            # Other options permitted by the CppDB library
            # Just an example how to use it:
            #db_cppdb_options="busy_timeout=100@use_prepared=off"

            ### MySQL
            #db_type="mysql";

            # hostname of the server (default is localhost)
            #db_host="localhost"

            # user to connect
            #db_user="dbuser";

            # password to connect to the server
            #db_password="very\'secret";

            # database to be used
            #db_database="solarpowerlog";

            # Port to access the server
            # db_port="3306";

            # Alternatively, specify the unix socket to be used
            # note: specify either port or socket -- not both!
            #db_unixsocket="tmp/mysql.sock"

            # Additional parameters (see CppDB homepage, especially the MySQL backend reference)
            #db_cppdb_options="opt_read_timeout=10;opt_compress=1";

            ### PostgreSQL
            #db_type="postgresql";

            # hostname of the server (default is localhost)
            #db_host="localhost"

            # user to connect
            #db_user="dbuser";

            # password to connect to the server
            #db_password="very\'secret";

            # database to be used
            #db_database="solarpowerlog";

            # Port to access the server
            # db_port="5432";

            # Additional parameters (see CppDB homepage, especially the postgresql backend reference)
            #db_cppdb_options="@blob=lo";

            ### ODBC Bridge
            #db_type="odbc";
            # You need to completly specify the connection string with db_cppdb_options:
            # See CppDB documentation of the ODBC backend.
            #db_cppdb_options="DSN=MySource;UID=myuser;PWD=secret";

            ### Custom
            #db_type="custom";
            # You need to completly specify the connection string with db_cppdb_options:
            # solarpowerlog will just pass the string to the library.
            #db_cppdb_options="odbc:DSN=MySource;UID=myuser;PWD=secret";

            ## this list specifies the jobs to be done...
            # every entry is one job...
            db_jobs = (
            {
                # The table to be used for this job
                db_table="mytable";
                
                # Allow "Sparse Tables", so logging also values if only 
                # a subset of all data is available.
                # solarpowerlog will then put "NULL" into the database.
                # optional, defaults to false
                db_allowsparse=false;

                # Should we only log if actually *something* changed
                # If set to "true" the logger will only write to the 
                # database if actual data changed (might reduce db size)
                # (note: to determine if smth has changed only data from the 
                # inverter is considered -- not e.g %TIMESTAMP or like.
                db_logchangedonly=true;

                # Time between logging to the database.
                db_logevery=3.0;

                # Should the table create on startup?
                # POTENTIALLY DANGEROUS -- can cause data loss.
                # You have two options:
                # "YES" -- uppercase YES will create the table but will add 
                #   "IF NOT EXISTS" to the SQL statement. So the table should 
                #   not be destroyed if it indeeds already exists. 
                #   (if your SQL supports this)
                # "YES-WIPE-MY-DATA" -- DANGEROUS OPTION, use uppercase letters
                #   This will DELETE the table before creating it.
                # "print-sql-statement" (lower case string): Just log the
                #   statement required to create the table as INFO-Level message.
                #   (This is good to give you an hint to create the table yourself)
                # NOTE: The below examples have an extra safety-pin: You need to
                # convert them to uppercase letters..
                # NOTE2: The table will not be created directly on startup, 
                # but with some delay, as solarpowerlog first needs to figure 
                # out the data-types to be used for each column.
                # This also means that db_layout must only reference 
                # Capabilities that are actually existing and provided 
                # by the Inverter.
                db_create_table="YES-WIPE-MY-DATA";
                #db_create_table="YES-WIPE-MY-DATA";

                #db_create_table="yes";
                #db_create_table="yes-wipe-my-data";
                #db_create_table="print-sql-statement"

                # db_operation_mode specifies some principle operational mode
                # for the DB-Writer. Options are:
                # continous 
                #   like CVS, just logging everything to one big 
                #   table. You maybe want a %TIMESTAMP, but that depends on you
                #   backend reading the data from the database.
                #   $Selektors are not available.
                # single 
                #   for status/single rows -- e.g tables with just one row 
                #   showing the actual status. This needs a $selector,
                #   which specifies the condition to select the to be updated
                #   row.
                # cumulative 
                #    log day/month/year/hourly data. This something between 
                #    continous/sinlge, as this will add data to the table,
                #    It will update a row instead of adding a new row.
                #    To select the right row all %modiefiers are used as 
                #    Selektors.
              
                db_operation_mode="continuous";
                #db_operation_mode="single";
                #db_operation_mode="cumulative";

                # Keywords
                # modifer "%...." special placeholders (Day, month, timestamp, ....)
                # selector "$" (to select the right row)
                #

                db_layout = (
                #     [  "Capability/Keyword" , "column" ],
                      [ "%TIMESTAMP"       , "created" ],
   #                   [ "%MONTH"           , "m" ],
  #                    [ "%DAY"             , "d" ],
 #                     [ "%HOUR"            , "h" ],
                      [ "Current Grid Feeding Power", "pac" ]
                );
               }
/*               ,
               {
                db_table="mytable2";

                logchangedonly=true;
                logevery=15.0;

                operation_mode="continuous";
                #operation_mode="single";
                #operation_mode="cumulative";

                # continous log -- like CVS, just loggiong everything to one big table. Needs a %TIMESTAMP column .
                # single status/single row  -- for tables with just one row showing actual status. determined by existance of a $selector
                # which specifies an condition to select the right row.
                # day/month/year/hourly/.. -- for cumulative tables (like how many kwH per day; determined by any %MONTH, %DAY, %HOUR ... time defining
                # selectors.)

                # Keywords
                # modifer "%...." special placeholders (Day, month, timestamp, ....)
                # selector "$" (to select the right row)
                #

                db_layout = (
                #     [  "Capability/Keyword" , "column" ],
                      [ "%TIMESTAMP"       , "created" ],
                      [ "%MONTH"           , "m" ],
                      [ "%DAY"             , "d" ],
                      [ "%HOUR"            , "h" ],
                      [ "Current Grid Feeding Power", "pac" ]
                );

                #tablespec =
                #   [ "$1", "id" ]
                #   [ "Inverter Overall Status", "status" ]
                #   [ "Inverter Temperature (C)", "Temperature"];

               }
*/               
            )
	}
    );
};

