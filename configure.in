
dnl Process this file with autoconf to produce a configure script.

AC_INIT(solarpowerlog, 0.20, tobi@coldtobi.de)
AC_PREREQ(2.59)
# use own directory for the autotools stuff
AC_CONFIG_AUX_DIR(config)

CPPFLAGS="-Wall -Wextra"

# we want this header to be created. 
AC_CONFIG_HEADERS(src/config.h)

# TODO
#AC_COPYRIGHT (copyright-notice )

AM_INIT_AUTOMAKE(solarpowerlog, 0.20)

AC_CONFIG_SRCDIR([src/solarpowerlog.cpp])


### options for some features that might not always be needed 
### (for shrinking the footprint)

## option for disable logging (default: on)
AC_ARG_ENABLE([logging],
	[AS_HELP_STRING([--disable-logging], [Disable logging facility. \
		Error output is limited to stdout/err and not configureable.])
	]
)

## option for disable command-line options support
## as this pulls in a boost library
AC_ARG_ENABLE([commandlineoptions],
	[AS_HELP_STRING([--disable-commandlineoptions], [Disable the ability to specify \
		command-line options. Instead, the program will always use defaults  \
		(that is e.g reading solarpowerlog.conf from the current dir). Avoids using \
		some external libraries.])
	]
)

if test "x$enable_commandlineoptions" != "xno" ; then
	enable_commandlineoptions=yes
else
	AC_MSG_NOTICE([Support for commandlineoptions disabled as requested.])
	enable_commandlineoptions=no
fi

### option to disable some modules. Default is to compile everything. 

## Inverters
# Sputnik support.
AC_ARG_ENABLE([sputnik],
	[AS_HELP_STRING([--disable-sputnik],
			[Do not support inverters by Sputnik engineering.])
	]
)

if test "x$enable_sputnik" != "xno" ; then
	AC_DEFINE([HAVE_INV_SPUTNIK], [1], [Sputnik inverter support])	
	enable_sputnik=yes
else
	AC_MSG_NOTICE([Support for Sputnik inverters disabled as requested.])
fi

## Filters / Dumpers

# CSV Writer
AC_ARG_ENABLE([csvlogger],
	[AS_HELP_STRING([--disable-csvlogger],
			[Do not support logging to CSV files.])
	]
)

if test "x$enable_csvlogger" != "xno" ; then
	AC_DEFINE([HAVE_FILTER_CSVDUMP], [1], [CSV Writer Support])	
	enable_csvlogger=yes
else
	AC_MSG_NOTICE([Support for CSV Writer disabled as requested.])
fi

# Dumb Dumper
AC_ARG_ENABLE([dumbdumper],
	[AS_HELP_STRING([--disable-dumbdumper],
			[Do not support the "dumb dumper" logging filter.])
	]
)

if test "x$enable_dumbdumper" != "xno" ; then
	AC_DEFINE([HAVE_FILTER_DUMBDUMP], [1], [Dumb Dumper Support])	
	enable_dumbdumper=yes
else
	AC_MSG_NOTICE([Support for the Dumb Dumper disabled as requested.])
fi


# CSV Writer
AC_ARG_ENABLE([csvlogger],
    [AS_HELP_STRING([--disable-csvlogger],
            [Do not support logging to CSV files.])
    ]
)

if test "x$enable_csvlogger" != "xno" ; then
    AC_DEFINE([HAVE_FILTER_CSVDUMP], [1], [CSV Writer Support]) 
    enable_csvlogger=yes
else
    AC_MSG_NOTICE([Support for CSV Writer disabled as requested.])
fi

# HTML Writer
AC_ARG_ENABLE([htmlwriter],
    [AS_HELP_STRING([--disable-htmlwriter],
            [Do not support the html writer module for writing static HTML files.])
    ]
)

if test "x$enable_htmlwriter" != "xno" ; then
    AC_DEFINE([HAVE_FILTER_HTMLWRITER], [1], [HTML Writer Support])   
    enable_htmlwriter=yes
    CTEMPLATE_LIB=-lctemplate
    CTEMPLATE_CFLAGS="-I ../extlibs"
    CTEMPLATE_DEPS=libctemplate.a
else
    AC_MSG_NOTICE([Support for the HTMLWriter disabled as requested.])
fi

AC_SUBST(CTEMPLATE_LIB)
AC_SUBST(CTEMPLATE_CFLAGS)
AC_SUBST(CTEMPLATE_DEPS)

### Checks for programs.
# C Compiler
AC_PROG_CC
# C++ Compiler
AC_PROG_CXX
# pkg-config
PKG_CHECK_EXISTS

# We only use C++...
AC_LANG(C++)

### Checks for libraries.

## Check for libconfig. Always required.
PKG_CHECK_MODULES(CONFIG, libconfig++ >= 1.3.1)

## Check for library liblog4cxx. Can be turned off with --disable-logging.  
if test "x$enable_logging" != "xno" ; then
	logging_dependencies_fullfilled="missing"

	PKG_CHECK_MODULES(LOG4CXX, liblog4cxx >= 0.10.0, , AC_MSG_RESULT([LibLog4CXX not found]))
	if test "x$LOG4CXX_PKG_ERRORS" != "x"; then
		logging_dependencies_fullfilled="missing liblog4cxx " 
	fi

	PKG_CHECK_MODULES(APR, apr-1 > 1, , AC_MSG_RESULT([apache portable runtime apr library not found]))
	if test "x$APR_PKG_ERRORS" != "x"; then
		logging_dependencies_fullfilled="$logging_dependencies_fullfilled libapr " 
	fi
	
	PKG_CHECK_MODULES(APRUTIL, apr-util-1 > 1, , AC_MSG_RESULT([apr utilities library not found]))
	if test "x$APRUTIL_PKG_ERRORS" != "x"; then
		logging_dependencies_fullfilled="$logging_dependencies_fullfilled libaprutil " 
	fi
	
	if test "$logging_dependencies_fullfilled" != "missing" ; then
		AC_MSG_NOTICE([liblog4cxx: Dependecy problem(s): $logging_dependencies_fullfilled])
		enable_logging="no (dependency problem(s): $logging_dependencies_fullfilled)"
		APR_LIBS=""
		APRUTIL_LIBS=""
		LOG4CXX_LIBS=""
	else
		AC_DEFINE([HAVE_LIBLOG4CXX], [1], [Logging Library])	
		enable_logging="yes"
	fi

else
	AC_MSG_NOTICE([Logging disabled as requested.])
fi

## Check for Boost 
AX_BOOST_BASE([1.38])

AX_BOOST_SYSTEM
if test "x$BOOST_SYSTEM_LIB" = "x"; then
   AC_MSG_ERROR([boost::system library $BOOST_SYSTEM_LIB not found ])
fi

AX_BOOST_THREAD
if test "x$BOOST_THREAD_LIB" = "x"; then
   AC_MSG_ERROR([boost::thread library not $BOOST_THREAD_LIB found ])
fi

AX_BOOST_DATE_TIME
if test "x$BOOST_DATE_TIME_LIB" = "x"; then
  AC_MSG_ERROR([boost::date_time library $BOOST_DATE_TIME_LIB not found ])
fi

if test "x$enable_commandlineoptions" == "xyes"; then
	AX_BOOST_PROGRAM_OPTIONS
	if test "x$BOOST_PROGRAM_OPTIONS_LIB" = "x"; then
		AC_MSG_NOTICE([boost::programm_options library $BOOST_PROGRAM_OPTIONS_LIB not found ])
		enable_commandlineoptions="no (dependency problem)"
	else
		AC_DEFINE([HAVE_CMDLINEOPTS], [1], [Use Boost for parsing command line options.])	
	fi
fi


# BOOST ASIO (Header-only-library)
# note: we are requiring boost 1.38, so we do not need to check the asio version here.
AC_CHECK_HEADER([boost/asio/version.hpp], ,[AC_MSG_ERROR("boost::asio header not found")])


### Checks for header files.
AC_CHECK_HEADER([w32api/wtypes.h],
 [AC_DEFINE([HAVE_WIN32_API], [1], [Windows API]) ])

if test "x$ac_cv_header_w32api_wtypes_h" = "xyes"; then
  AC_MSG_RESULT([WIN32 API detected. ])
  WIN32_LIBS="-lws2_32"
  AC_SUBST(WIN32_LIBS)
fi


### Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_HEADER_TIME
AC_HEADER_ASSERT
AC_TYPE_SIZE_T


### Checks for library functions.
#AC_CHECK_FUNCS([socket])

# Cygwin has no open_memstream, at least not in the current stable version. 
AC_CHECK_FUNC(open_memstream, AC_DEFINE(HAVE_OPEN_MEMSTREAM, 1, [1 if open_memstream is available]))

AC_PROG_INSTALL

AC_CONFIG_FILES(
	[Makefile]
	[src/Makefile]
)
AC_OUTPUT

AC_MSG_NOTICE([]);
AC_MSG_NOTICE([CONFIGURATION SUMMARY:]);
### Print summary
AC_MSG_NOTICE([Logging support: ........................... $enable_logging])
AC_MSG_NOTICE([Commandline options: ....................... $enable_commandlineoptions])

AC_MSG_NOTICE([INVERTERS:]);
AC_MSG_NOTICE([Sputnik support: ........................... $enable_sputnik])

AC_MSG_NOTICE([FILTERS AND LOGGERS:]);
AC_MSG_NOTICE([CSV logger support: ........................ $enable_csvlogger])
AC_MSG_NOTICE([Dumb Dumper support: ....................... $enable_dumbdumper])
AC_MSG_NOTICE([HTML Writer support: ....................... $enable_htmlwriter])

